#!/usr/bin/env python3
# coding=UTF8

import argparse, sys, pg_extractor.pg_extractor as pg_extractor

# Get parameters

parser = argparse.ArgumentParser(description="Creates copy and schema scripts for a PostgreSQL table. For geo typing purposes, the script assumes uniformity in geometry type and SRID for geom columns. Do not generate indices other than geometry ones and primary keys.")
parser.add_argument("-o", default="localhost", help="PG host", dest="host")
parser.add_argument("-p", default="5432", help="PG port", dest="port")
parser.add_argument("-U", default="postgres", help="PG user", dest="user")
parser.add_argument("-d", default="postgres", help="PG database", dest="database")
parser.add_argument("-s", default="postgres", help="PG password", dest="password")
parser.add_argument("-n", default=None, help="New table name", dest="newTableName")
parser.add_argument("-r", default=False, action="store_true", help="Rename constraints")
parser.add_argument("table", help="schema.table format, if ommited, schema is public by default")

args = parser.parse_args()

a, b = pg_extractor.scripts(args.table, host=args.host, port=args.port, user=args.user, database=args.database, password=args.password, newTableName=args.newTableName, renameConstraints=args.r)


# Create new table name
newTableFullName = args.newTableName if args.newTableName else args.table
newTableName = newTableFullName.split(".")[1]

# Write load script
loadScript = open("%s-Table_DDL.sql" % newTableName, "w")
loadScript.write(a)
loadScript.close()

# Write copy script
copyScript = open("%s-Copy.sql" % newTableName, "w")
copyScript.write(b)
copyScript.close()

sys.exit(0)